{"id":"node_modules/bytesish/core.js","dependencies":[{"name":"/Users/ayosowunmi/Desktop/udemy/fundamentals-javascript-course/complete-javascript-course-master/18-forkify/starter/package.json","includedInParent":true,"mtime":1643224433014},{"name":"/Users/ayosowunmi/Desktop/udemy/fundamentals-javascript-course/complete-javascript-course-master/18-forkify/starter/node_modules/bytesish/package.json","includedInParent":true,"mtime":499162500000}],"generated":{"js":"'use strict'\n\nconst length = (a, b) => {\n  if (a.byteLength === b.byteLength) return a.byteLength\n  else if (a.byteLength > b.byteLength) return a.byteLength\n  return b.byteLength\n}\n\nconst bytes = (_from, encoding) => bytes.from(_from, encoding)\n\nbytes.sorter = (a, b) => {\n  a = bytes(a)\n  b = bytes(b)\n  const len = length(a, b)\n  let i = 0\n  while (i < (len - 1)) {\n    if (i >= a.byteLength) return 1\n    else if (i >= b.byteLength) return -1\n\n    if (a.getUint8(i) < b.getUint8(i)) return -1\n    else if (a.getUint8(i) > b.getUint8(i)) return 1\n    i++\n  }\n  return 0\n}\n\nbytes.compare = (a, b) => !bytes.sorter(a, b)\nbytes.memcopy = (_from, encoding) => {\n  const b = bytes(_from, encoding)\n  return b.buffer.slice(b.byteOffset, b.byteOffset + b.byteLength)\n}\nbytes.arrayBuffer = (_from, encoding) => {\n  _from = bytes(_from, encoding)\n  if (_from.buffer.byteLength === _from.byteLength) return _from.buffer\n  return _from.buffer.slice(_from.byteOffset, _from.byteOffset + _from.byteLength)\n}\nconst sliceOptions = (_from, start = 0, end = null) => {\n  _from = bytes(_from)\n  end = (end === null ? _from.byteLength : end) - start\n  return [_from.buffer, _from.byteOffset + start, end]\n}\nbytes.slice = (_from, start, end) => new DataView(...sliceOptions(_from, start, end))\n\nbytes.memcopySlice = (_from, start, end) => {\n  const [buffer, offset, length] = sliceOptions(_from, start, end)\n  return buffer.slice(offset, length + offset)\n}\nbytes.typedArray = (_from, _Class = Uint8Array) => {\n  _from = bytes(_from)\n  return new _Class(_from.buffer, _from.byteOffset, _from.byteLength / _Class.BYTES_PER_ELEMENT)\n}\n\nbytes.concat = (_from) => {\n  _from = Array.from(_from)\n  _from = _from.map(b => bytes(b))\n  const length = _from.reduce((x, y) => x + y.byteLength, 0)\n  const ret = new Uint8Array(length)\n  let i = 0\n  for (const part of _from) {\n    const view = bytes.typedArray(part)\n    ret.set(view, i)\n    i += view.byteLength\n  }\n  return ret.buffer\n}\n\nconst maxEntropy = 65536\n\nbytes.random = length => {\n  const ab = new ArrayBuffer(length)\n  if (length > maxEntropy) {\n    let i = 0\n    while (i < ab.byteLength) {\n      let len\n      if (i + maxEntropy > ab.byteLength) len = ab.byteLength - i\n      else len = maxEntropy\n      const view = new Uint8Array(ab, i, len)\n      i += maxEntropy\n      bytes._randomFill(view)\n    }\n  } else {\n    const view = new Uint8Array(ab)\n    bytes._randomFill(view)\n  }\n  return ab\n}\n\nmodule.exports = bytes\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/bytesish/core.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/bytesish/core.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}}],"sources":{"node_modules/bytesish/core.js":"'use strict'\n\nconst length = (a, b) => {\n  if (a.byteLength === b.byteLength) return a.byteLength\n  else if (a.byteLength > b.byteLength) return a.byteLength\n  return b.byteLength\n}\n\nconst bytes = (_from, encoding) => bytes.from(_from, encoding)\n\nbytes.sorter = (a, b) => {\n  a = bytes(a)\n  b = bytes(b)\n  const len = length(a, b)\n  let i = 0\n  while (i < (len - 1)) {\n    if (i >= a.byteLength) return 1\n    else if (i >= b.byteLength) return -1\n\n    if (a.getUint8(i) < b.getUint8(i)) return -1\n    else if (a.getUint8(i) > b.getUint8(i)) return 1\n    i++\n  }\n  return 0\n}\n\nbytes.compare = (a, b) => !bytes.sorter(a, b)\nbytes.memcopy = (_from, encoding) => {\n  const b = bytes(_from, encoding)\n  return b.buffer.slice(b.byteOffset, b.byteOffset + b.byteLength)\n}\nbytes.arrayBuffer = (_from, encoding) => {\n  _from = bytes(_from, encoding)\n  if (_from.buffer.byteLength === _from.byteLength) return _from.buffer\n  return _from.buffer.slice(_from.byteOffset, _from.byteOffset + _from.byteLength)\n}\nconst sliceOptions = (_from, start = 0, end = null) => {\n  _from = bytes(_from)\n  end = (end === null ? _from.byteLength : end) - start\n  return [_from.buffer, _from.byteOffset + start, end]\n}\nbytes.slice = (_from, start, end) => new DataView(...sliceOptions(_from, start, end))\n\nbytes.memcopySlice = (_from, start, end) => {\n  const [buffer, offset, length] = sliceOptions(_from, start, end)\n  return buffer.slice(offset, length + offset)\n}\nbytes.typedArray = (_from, _Class = Uint8Array) => {\n  _from = bytes(_from)\n  return new _Class(_from.buffer, _from.byteOffset, _from.byteLength / _Class.BYTES_PER_ELEMENT)\n}\n\nbytes.concat = (_from) => {\n  _from = Array.from(_from)\n  _from = _from.map(b => bytes(b))\n  const length = _from.reduce((x, y) => x + y.byteLength, 0)\n  const ret = new Uint8Array(length)\n  let i = 0\n  for (const part of _from) {\n    const view = bytes.typedArray(part)\n    ret.set(view, i)\n    i += view.byteLength\n  }\n  return ret.buffer\n}\n\nconst maxEntropy = 65536\n\nbytes.random = length => {\n  const ab = new ArrayBuffer(length)\n  if (length > maxEntropy) {\n    let i = 0\n    while (i < ab.byteLength) {\n      let len\n      if (i + maxEntropy > ab.byteLength) len = ab.byteLength - i\n      else len = maxEntropy\n      const view = new Uint8Array(ab, i, len)\n      i += maxEntropy\n      bytes._randomFill(view)\n    }\n  } else {\n    const view = new Uint8Array(ab)\n    bytes._randomFill(view)\n  }\n  return ab\n}\n\nmodule.exports = bytes\n"},"lineCount":89}},"error":null,"hash":"a36594c575cda243ac661f06d9413f66","cacheData":{"env":{}}}