{"id":"node_modules/@ipld/schema-gen/src/parse.js","dependencies":[{"name":"/Users/ayosowunmi/Desktop/udemy/fundamentals-javascript-course/complete-javascript-course-master/18-forkify/starter/package.json","includedInParent":true,"mtime":1643224433014},{"name":"/Users/ayosowunmi/Desktop/udemy/fundamentals-javascript-course/complete-javascript-course-master/18-forkify/starter/node_modules/@ipld/schema-gen/package.json","includedInParent":true,"mtime":499162500000},{"name":"./types","loc":{"line":2,"column":28},"parent":"/Users/ayosowunmi/Desktop/udemy/fundamentals-javascript-course/complete-javascript-course-master/18-forkify/starter/node_modules/@ipld/schema-gen/src/parse.js","resolved":"/Users/ayosowunmi/Desktop/udemy/fundamentals-javascript-course/complete-javascript-course-master/18-forkify/starter/node_modules/@ipld/schema-gen/src/types.js"}],"generated":{"js":"'use strict'\nconst createTypes = require('./types')\n\nconst parse = (schema, opts = {}) => {\n  const types = createTypes(opts)\n\n  const classes = {}\n\n  const createClass = (className, _schema) => {\n    if (types[className]) throw new Error(`Name conflict, cannot define ${className} twice.`)\n    const kindName = _schema.kind.toUpperCase()[0] + _schema.kind.slice(1)\n    const Base = types[kindName]\n    if (!Base) throw new Error(`Unknown kind ${_schema.kind}`)\n    const Class = class Dynamic extends Base {}\n    Class.__schema = _schema\n    Object.defineProperty(Class, 'name', { value: className })\n    return Class\n  }\n\n  const advancedLayouts = {}\n\n  if (schema.advanced) {\n    for (const [className, _schema] of Object.entries(schema.advanced)) {\n      const Class = createClass(className, _schema)\n      advancedLayouts[className] = Class\n    }\n  }\n\n  if (schema.types) {\n    for (const [className, _schema] of Object.entries(schema.types)) {\n      let Class\n      if (_schema.representation && _schema.representation.advanced) {\n        const advName = _schema.representation.advanced\n        if (!advancedLayouts[advName]) throw new Error(`Missing advanced layout ${advName}`)\n        if (!classes[advName]) throw new Error(`Missing advanced layout schema ${advName}`)\n        if (!opts.advanced || !opts.advanced[advName]) throw new Error(`Missing implementation of advanced layout ${advName}`)\n        const Base = advancedLayouts[advName]\n        const nodeType = classes[advName]\n        Class = class Dynamic extends Base {}\n        Object.defineProperty(Class, 'name', { value: className })\n        Class.create = value => {\n          if (value && value.isNode) {\n            if (!(value instanceof Class)) throw new Error('Cannot re-type node')\n            return value\n          }\n          return new Class(value, { ..._schema, nodeType }, opts.advanced[advName])\n        }\n      } else {\n        Class = createClass(className, _schema)\n        Class.create = (value, fieldSchema) => {\n          if (value && value.isNode) {\n            if (!(value instanceof Class)) throw new Error('Cannot re-type node')\n            return value\n          }\n          let __schema\n          if (fieldSchema) __schema = { ..._schema, fieldSchema }\n          else __schema = _schema\n          return new Class(value, __schema)\n        }\n      }\n      Class.decoder = (value) => {\n        // TODO: rename aliased properties to their public names\n        const node = Class.create(value)\n        node.validate()\n        return node\n      }\n      Class.encoder = (value) => {\n        const node = Class.create(value)\n        node.validate()\n        return node\n      }\n      types[className] = classes[className] = Class\n    }\n  }\n  return classes\n}\n\nmodule.exports = parse\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/parse.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}}],"sources":{"node_modules/@ipld/schema-gen/src/parse.js":"'use strict'\nconst createTypes = require('./types')\n\nconst parse = (schema, opts = {}) => {\n  const types = createTypes(opts)\n\n  const classes = {}\n\n  const createClass = (className, _schema) => {\n    if (types[className]) throw new Error(`Name conflict, cannot define ${className} twice.`)\n    const kindName = _schema.kind.toUpperCase()[0] + _schema.kind.slice(1)\n    const Base = types[kindName]\n    if (!Base) throw new Error(`Unknown kind ${_schema.kind}`)\n    const Class = class Dynamic extends Base {}\n    Class.__schema = _schema\n    Object.defineProperty(Class, 'name', { value: className })\n    return Class\n  }\n\n  const advancedLayouts = {}\n\n  if (schema.advanced) {\n    for (const [className, _schema] of Object.entries(schema.advanced)) {\n      const Class = createClass(className, _schema)\n      advancedLayouts[className] = Class\n    }\n  }\n\n  if (schema.types) {\n    for (const [className, _schema] of Object.entries(schema.types)) {\n      let Class\n      if (_schema.representation && _schema.representation.advanced) {\n        const advName = _schema.representation.advanced\n        if (!advancedLayouts[advName]) throw new Error(`Missing advanced layout ${advName}`)\n        if (!classes[advName]) throw new Error(`Missing advanced layout schema ${advName}`)\n        if (!opts.advanced || !opts.advanced[advName]) throw new Error(`Missing implementation of advanced layout ${advName}`)\n        const Base = advancedLayouts[advName]\n        const nodeType = classes[advName]\n        Class = class Dynamic extends Base {}\n        Object.defineProperty(Class, 'name', { value: className })\n        Class.create = value => {\n          if (value && value.isNode) {\n            if (!(value instanceof Class)) throw new Error('Cannot re-type node')\n            return value\n          }\n          return new Class(value, { ..._schema, nodeType }, opts.advanced[advName])\n        }\n      } else {\n        Class = createClass(className, _schema)\n        Class.create = (value, fieldSchema) => {\n          if (value && value.isNode) {\n            if (!(value instanceof Class)) throw new Error('Cannot re-type node')\n            return value\n          }\n          let __schema\n          if (fieldSchema) __schema = { ..._schema, fieldSchema }\n          else __schema = _schema\n          return new Class(value, __schema)\n        }\n      }\n      Class.decoder = (value) => {\n        // TODO: rename aliased properties to their public names\n        const node = Class.create(value)\n        node.validate()\n        return node\n      }\n      Class.encoder = (value) => {\n        const node = Class.create(value)\n        node.validate()\n        return node\n      }\n      types[className] = classes[className] = Class\n    }\n  }\n  return classes\n}\n\nmodule.exports = parse\n"},"lineCount":79}},"error":null,"hash":"d6775b7740dacfa97b01be4da12740f0","cacheData":{"env":{}}}