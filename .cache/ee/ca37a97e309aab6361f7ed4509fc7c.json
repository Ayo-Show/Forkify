{"id":"node_modules/@ipld/codec-interface/index.js","dependencies":[{"name":"/Users/ayosowunmi/Desktop/udemy/fundamentals-javascript-course/complete-javascript-course-master/18-forkify/starter/package.json","includedInParent":true,"mtime":1643224433014},{"name":"/Users/ayosowunmi/Desktop/udemy/fundamentals-javascript-course/complete-javascript-course-master/18-forkify/starter/node_modules/@ipld/codec-interface/package.json","includedInParent":true,"mtime":499162500000},{"name":"cids","loc":{"line":2,"column":20},"parent":"/Users/ayosowunmi/Desktop/udemy/fundamentals-javascript-course/complete-javascript-course-master/18-forkify/starter/node_modules/@ipld/codec-interface/index.js","resolved":"/Users/ayosowunmi/Desktop/udemy/fundamentals-javascript-course/complete-javascript-course-master/18-forkify/starter/node_modules/@ipld/codec-interface/node_modules/cids/src/index.js"}],"generated":{"js":"'use strict'\nconst CID = require('cids')\n\n/* eslint-disable max-depth */\nconst links = function * (decoded, path = []) {\n  for (const key of Object.keys(decoded)) {\n    const _path = path.slice()\n    _path.push(key)\n    const val = decoded[key]\n    if (val && typeof val === 'object') {\n      if (Array.isArray(val)) {\n        for (let i = 0; i < val.length; i++) {\n          const __path = _path.slice()\n          __path.push(i)\n          const o = val[i]\n          if (CID.isCID(o)) {\n            yield [__path.join('/'), o]\n          } else if (typeof o === 'object') {\n            yield * links(o, __path)\n          }\n        }\n      } else {\n        if (CID.isCID(val)) {\n          yield [_path.join('/'), val]\n        } else {\n          yield * links(val, _path)\n        }\n      }\n    }\n  }\n}\n\nconst tree = function * (decoded, path = []) {\n  for (const key of Object.keys(decoded)) {\n    const _path = path.slice()\n    _path.push(key)\n    yield _path.join('/')\n    const val = decoded[key]\n    if (val && typeof val === 'object' && !CID.isCID(val)) {\n      if (Array.isArray(val)) {\n        for (let i = 0; i < val.length; i++) {\n          const __path = _path.slice()\n          __path.push(i)\n          const o = val[i]\n          yield __path.join('/')\n          if (typeof o === 'object' && !CID.isCID(o)) {\n            yield * tree(o, __path)\n          }\n        }\n      } else {\n        yield * tree(val, _path)\n      }\n    }\n  }\n}\n/* eslint-enable max-depth */\n\nconst readonly = () => {\n  throw new Error('Read-only property')\n}\n\nclass Reader {\n  constructor (decoded) {\n    Object.defineProperty(this, 'decoded', {\n      get: () => decoded,\n      set: readonly\n    })\n  }\n\n  get (path) {\n    let node = this.decoded\n    path = path.split('/').filter(x => x)\n    while (path.length) {\n      const key = path.shift()\n      if (node[key] === undefined) { throw new Error(`Object has no property ${key}`) }\n      node = node[key]\n      if (CID.isCID(node)) return { value: node, remaining: path.join('/') }\n    }\n    return { value: node }\n  }\n\n  links () {\n    return links(this.decoded)\n  }\n\n  tree () {\n    return tree(this.decoded)\n  }\n}\n\nclass CodecInterface {\n  constructor (encode, decode, codec) {\n    this.encode = encode\n    this.decode = decode\n    Object.defineProperty(this, 'codec', { get: () => codec, set: readonly })\n  }\n\n  reader (block) {\n    // Skip a decoding if the source is available.\n    if (block.source && block.source()) return new Reader(block.source())\n    // Full decoding is required for the standard Reader interface\n    const decoded = block.decode()\n    return new Reader(decoded)\n  }\n}\n\nexports.create = (encode, decode, codec) => {\n  return new CodecInterface(encode, decode, codec)\n}\nexports.CodecInterface = CodecInterface\nexports.Reader = Reader\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/@ipld/codec-interface/index.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}}],"sources":{"node_modules/@ipld/codec-interface/index.js":"'use strict'\nconst CID = require('cids')\n\n/* eslint-disable max-depth */\nconst links = function * (decoded, path = []) {\n  for (const key of Object.keys(decoded)) {\n    const _path = path.slice()\n    _path.push(key)\n    const val = decoded[key]\n    if (val && typeof val === 'object') {\n      if (Array.isArray(val)) {\n        for (let i = 0; i < val.length; i++) {\n          const __path = _path.slice()\n          __path.push(i)\n          const o = val[i]\n          if (CID.isCID(o)) {\n            yield [__path.join('/'), o]\n          } else if (typeof o === 'object') {\n            yield * links(o, __path)\n          }\n        }\n      } else {\n        if (CID.isCID(val)) {\n          yield [_path.join('/'), val]\n        } else {\n          yield * links(val, _path)\n        }\n      }\n    }\n  }\n}\n\nconst tree = function * (decoded, path = []) {\n  for (const key of Object.keys(decoded)) {\n    const _path = path.slice()\n    _path.push(key)\n    yield _path.join('/')\n    const val = decoded[key]\n    if (val && typeof val === 'object' && !CID.isCID(val)) {\n      if (Array.isArray(val)) {\n        for (let i = 0; i < val.length; i++) {\n          const __path = _path.slice()\n          __path.push(i)\n          const o = val[i]\n          yield __path.join('/')\n          if (typeof o === 'object' && !CID.isCID(o)) {\n            yield * tree(o, __path)\n          }\n        }\n      } else {\n        yield * tree(val, _path)\n      }\n    }\n  }\n}\n/* eslint-enable max-depth */\n\nconst readonly = () => {\n  throw new Error('Read-only property')\n}\n\nclass Reader {\n  constructor (decoded) {\n    Object.defineProperty(this, 'decoded', {\n      get: () => decoded,\n      set: readonly\n    })\n  }\n\n  get (path) {\n    let node = this.decoded\n    path = path.split('/').filter(x => x)\n    while (path.length) {\n      const key = path.shift()\n      if (node[key] === undefined) { throw new Error(`Object has no property ${key}`) }\n      node = node[key]\n      if (CID.isCID(node)) return { value: node, remaining: path.join('/') }\n    }\n    return { value: node }\n  }\n\n  links () {\n    return links(this.decoded)\n  }\n\n  tree () {\n    return tree(this.decoded)\n  }\n}\n\nclass CodecInterface {\n  constructor (encode, decode, codec) {\n    this.encode = encode\n    this.decode = decode\n    Object.defineProperty(this, 'codec', { get: () => codec, set: readonly })\n  }\n\n  reader (block) {\n    // Skip a decoding if the source is available.\n    if (block.source && block.source()) return new Reader(block.source())\n    // Full decoding is required for the standard Reader interface\n    const decoded = block.decode()\n    return new Reader(decoded)\n  }\n}\n\nexports.create = (encode, decode, codec) => {\n  return new CodecInterface(encode, decode, codec)\n}\nexports.CodecInterface = CodecInterface\nexports.Reader = Reader\n"},"lineCount":112}},"error":null,"hash":"39dff3e6ebba4b440774c4c704636bda","cacheData":{"env":{}}}