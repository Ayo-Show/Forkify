{"id":"node_modules/@ipld/unixfsv2/src/data.js","dependencies":[{"name":"/Users/ayosowunmi/Desktop/udemy/fundamentals-javascript-course/complete-javascript-course-master/18-forkify/starter/package.json","includedInParent":true,"mtime":1643224433014},{"name":"/Users/ayosowunmi/Desktop/udemy/fundamentals-javascript-course/complete-javascript-course-master/18-forkify/starter/node_modules/@ipld/unixfsv2/package.json","includedInParent":true,"mtime":499162500000},{"name":"@ipld/schema-gen","loc":{"line":2,"column":20},"parent":"/Users/ayosowunmi/Desktop/udemy/fundamentals-javascript-course/complete-javascript-course-master/18-forkify/starter/node_modules/@ipld/unixfsv2/src/data.js","resolved":"/Users/ayosowunmi/Desktop/udemy/fundamentals-javascript-course/complete-javascript-course-master/18-forkify/starter/node_modules/@ipld/unixfsv2/node_modules/@ipld/schema-gen/index.js"},{"name":"./data-layout.json","loc":{"line":3,"column":23},"parent":"/Users/ayosowunmi/Desktop/udemy/fundamentals-javascript-course/complete-javascript-course-master/18-forkify/starter/node_modules/@ipld/unixfsv2/src/data.js","resolved":"/Users/ayosowunmi/Desktop/udemy/fundamentals-javascript-course/complete-javascript-course-master/18-forkify/starter/node_modules/@ipld/unixfsv2/src/data-layout.json"},{"name":"@ipld/block","loc":{"line":4,"column":22},"parent":"/Users/ayosowunmi/Desktop/udemy/fundamentals-javascript-course/complete-javascript-course-master/18-forkify/starter/node_modules/@ipld/unixfsv2/src/data.js","resolved":"/Users/ayosowunmi/Desktop/udemy/fundamentals-javascript-course/complete-javascript-course-master/18-forkify/starter/node_modules/@ipld/block/index.js"},{"name":"buffer","parent":"/Users/ayosowunmi/Desktop/udemy/fundamentals-javascript-course/complete-javascript-course-master/18-forkify/starter/node_modules/@ipld/unixfsv2/src/data.js","resolved":"/Users/ayosowunmi/Desktop/udemy/fundamentals-javascript-course/complete-javascript-course-master/18-forkify/starter/node_modules/node-libs-browser/node_modules/buffer/index.js"}],"generated":{"js":"var Buffer = require(\"buffer\").Buffer;\n'use strict'\nconst gen = require('@ipld/schema-gen')\nconst schema = require('./data-layout.json')\nconst Block = require('@ipld/block')\n\nconst indexLength = ii => ii[ii.length - 1].reduce((x, y) => x + y)\n\nconst readAnything = async function * (selector, node, start = 0, end = Infinity) {\n  const offsets = (offset, length) => {\n    let l = end - offset\n    if (l === Infinity || l > length) l = undefined\n    let s = start - offset\n    if (s < 0) s = 0\n    return [s, l]\n  }\n\n  const indexes = node.resolve('indexes').decode()\n  const parts = node.resolve('parts')\n  let i = 0\n\n  for (const [offset, length] of indexes) {\n    if ((offset + length) >= start && offset < end) {\n      const b = await parts.getNode(i + '/' + selector)\n      yield * b.read(...offsets(offset, length))\n    }\n    i++\n  }\n}\n\nconst readByteLinkArray = (node, start, end) => readAnything('', node, start, end)\nconst readNestedByteList = (node, start, end) => readAnything('*', node, start, end)\n\nconst readBytes = async function * (node, start = 0, end) {\n  const bytes = await node.getNode('bytes/*')\n  yield * bytes.read(start, end)\n}\n\nconst getLength = node => {\n  const indexes = node.resolve('indexes').value\n  if (!indexes.length) return 0\n  const [offset, length] = indexes[indexes.length - 1].encode()\n  return offset + length\n}\n\nconst advanced = {\n  DataLayout: { read: readBytes, length: node => node.size ? node.size.value : null },\n  ByteLinksLayout: { read: readByteLinkArray, length: getLength },\n  NestedByteListLayout: { read: readNestedByteList, length: getLength }\n}\n\nmodule.exports = opts => {\n  opts = { ...opts, advanced }\n  const classes = gen(schema, opts)\n  const _writer = () => {\n    const indexes = []\n    const parts = []\n    let offset = 0\n    const write = buffer => {\n      indexes.push([offset, buffer.length])\n      offset += buffer.length\n      const block = Block.encoder(buffer, 'raw')\n      parts.push(block.cid())\n      return block\n    }\n    const end = async () => ({ indexes, parts: await Promise.all(parts) })\n    return { write, end }\n  }\n  classes.ByteLinks.fromArray = async function * (arr) {\n    const { write, end } = _writer()\n    for (const buffer of arr) {\n      const block = write(buffer)\n      yield { block }\n    }\n    const data = await end()\n    yield { root: classes.ByteLinks.encoder(data) }\n  }\n  const defaults = {\n    maxListLength: 500,\n    algorithm: 'balanced',\n    inline: 0\n  }\n  const balancedDag = async function * (indexes, parts, max, codec) {\n    if (indexes.length !== parts.length) {\n      throw new Error('index length must match part length')\n    }\n    indexes = [...indexes]\n    parts = [...parts]\n    const size = Math.ceil(indexes.length / max)\n\n    const main = { indexes: [], parts: [] }\n    if (size > max) {\n      while (indexes.length) {\n        const chunk = {\n          indexes: indexes.splice(0, max),\n          parts: parts.splice(0, max),\n          algo: 'balanced'\n        }\n        let union\n        for await (const { len, block, root } of balancedDag(chunk.indexes, chunk.parts, max, codec)) {\n          if (block) {\n            yield { len, block }\n          }\n          union = root\n        }\n        const node = classes.BytesUnion.encoder(union)\n        const block = node.block()\n        const len = indexLength(union.nbl.indexes)\n        yield { len, block }\n        main.indexes.push(len)\n        main.parts.push(block.cid())\n      }\n    } else {\n      while (indexes.length) {\n        const chunk = {\n          indexes: indexes.splice(0, max),\n          parts: parts.splice(0, max)\n        }\n        let offset = 0\n        for (const part of chunk.indexes) {\n          part[0] = offset\n          offset += part[1]\n        }\n        const block = classes.BytesUnion.encoder({ byteLinks: chunk }).block()\n        yield { len: offset, block }\n        main.indexes.push(offset)\n        main.parts.push(block.cid())\n      }\n    }\n    let offset = 0\n    indexes = main.indexes.map(i => {\n      const ret = [offset, i]\n      offset += i\n      return ret\n    })\n    parts = await Promise.all(main.parts)\n    yield { root: { nbl: { indexes, parts, algo: 'balanced' } } }\n  }\n\n  classes.Data.writer = (opts = {}) => {\n    opts = { ...defaults, ...opts }\n    const { write, end } = _writer()\n    let first\n    const _write = block => {\n      if (!first) first = block\n      return write(block)\n    }\n    const _end = async () => {\n      const { indexes, parts } = await end()\n      if (!indexes.length) return { bytes: { bytes: Buffer.from('') }, size: 0 }\n\n      const size = indexLength(indexes)\n\n      if (indexes.length === 1) {\n        const length = indexes[0][1]\n        if (length > opts.inline) {\n          return { bytes: { bytesLink: parts[0] }, size }\n        } else {\n          return { bytes: { bytes: first.encode() }, size }\n        }\n      }\n      if (indexes.length > opts.maxListLength) {\n        const results = []\n        if (opts.algorithm === 'balanced') {\n          for await (const result of balancedDag(indexes, parts, opts.maxListLength, opts.codec)) {\n            results.push(result)\n          }\n        } else {\n          throw new Error(`Not Implemented: algorith (${opts.algorithm})`)\n        }\n        const last = results.pop()\n        const blocks = results.map(r => r.block)\n        return { blocks, bytes: last.root, size }\n      } else {\n        return { bytes: { byteLinks: { indexes, parts } }, size }\n      }\n    }\n    return { write: _write, end: _end }\n  }\n  classes.Data.from = async function * (arr, opts) {\n    const { write, end } = classes.Data.writer(opts)\n    for (const buffer of arr) {\n      yield { block: write(buffer) }\n    }\n    const data = await end()\n    yield * data.blocks.map(u => ({ block: u }))\n    delete data.blocks\n    yield { root: classes.Data.encoder(data) }\n  }\n  return classes\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":101,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":102,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":103,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":104,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":105,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":106,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":107,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":108,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":109,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":110,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":111,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":112,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":113,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":114,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":115,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":116,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":117,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":118,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":119,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":120,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":121,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":122,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":123,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":124,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":125,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":126,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":127,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":128,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":129,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":130,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":131,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":132,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":133,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":134,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":135,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":136,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":137,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":138,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":139,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":140,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":141,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":142,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":143,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":144,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":145,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":146,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":147,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":148,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":149,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":150,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":151,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":152,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":153,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":154,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":155,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":156,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":157,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":158,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":159,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":160,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":161,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":162,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":163,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":164,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":165,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":166,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":167,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":168,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":169,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":170,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":171,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":172,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":173,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":174,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":175,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":176,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":177,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":178,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":179,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":180,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":181,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":182,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":183,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":184,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":185,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":186,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":187,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":188,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":189,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":190,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/data.js","original":{"line":191,"column":0},"generated":{"line":192,"column":0}}],"sources":{"node_modules/@ipld/unixfsv2/src/data.js":"'use strict'\nconst gen = require('@ipld/schema-gen')\nconst schema = require('./data-layout.json')\nconst Block = require('@ipld/block')\n\nconst indexLength = ii => ii[ii.length - 1].reduce((x, y) => x + y)\n\nconst readAnything = async function * (selector, node, start = 0, end = Infinity) {\n  const offsets = (offset, length) => {\n    let l = end - offset\n    if (l === Infinity || l > length) l = undefined\n    let s = start - offset\n    if (s < 0) s = 0\n    return [s, l]\n  }\n\n  const indexes = node.resolve('indexes').decode()\n  const parts = node.resolve('parts')\n  let i = 0\n\n  for (const [offset, length] of indexes) {\n    if ((offset + length) >= start && offset < end) {\n      const b = await parts.getNode(i + '/' + selector)\n      yield * b.read(...offsets(offset, length))\n    }\n    i++\n  }\n}\n\nconst readByteLinkArray = (node, start, end) => readAnything('', node, start, end)\nconst readNestedByteList = (node, start, end) => readAnything('*', node, start, end)\n\nconst readBytes = async function * (node, start = 0, end) {\n  const bytes = await node.getNode('bytes/*')\n  yield * bytes.read(start, end)\n}\n\nconst getLength = node => {\n  const indexes = node.resolve('indexes').value\n  if (!indexes.length) return 0\n  const [offset, length] = indexes[indexes.length - 1].encode()\n  return offset + length\n}\n\nconst advanced = {\n  DataLayout: { read: readBytes, length: node => node.size ? node.size.value : null },\n  ByteLinksLayout: { read: readByteLinkArray, length: getLength },\n  NestedByteListLayout: { read: readNestedByteList, length: getLength }\n}\n\nmodule.exports = opts => {\n  opts = { ...opts, advanced }\n  const classes = gen(schema, opts)\n  const _writer = () => {\n    const indexes = []\n    const parts = []\n    let offset = 0\n    const write = buffer => {\n      indexes.push([offset, buffer.length])\n      offset += buffer.length\n      const block = Block.encoder(buffer, 'raw')\n      parts.push(block.cid())\n      return block\n    }\n    const end = async () => ({ indexes, parts: await Promise.all(parts) })\n    return { write, end }\n  }\n  classes.ByteLinks.fromArray = async function * (arr) {\n    const { write, end } = _writer()\n    for (const buffer of arr) {\n      const block = write(buffer)\n      yield { block }\n    }\n    const data = await end()\n    yield { root: classes.ByteLinks.encoder(data) }\n  }\n  const defaults = {\n    maxListLength: 500,\n    algorithm: 'balanced',\n    inline: 0\n  }\n  const balancedDag = async function * (indexes, parts, max, codec) {\n    if (indexes.length !== parts.length) {\n      throw new Error('index length must match part length')\n    }\n    indexes = [...indexes]\n    parts = [...parts]\n    const size = Math.ceil(indexes.length / max)\n\n    const main = { indexes: [], parts: [] }\n    if (size > max) {\n      while (indexes.length) {\n        const chunk = {\n          indexes: indexes.splice(0, max),\n          parts: parts.splice(0, max),\n          algo: 'balanced'\n        }\n        let union\n        for await (const { len, block, root } of balancedDag(chunk.indexes, chunk.parts, max, codec)) {\n          if (block) {\n            yield { len, block }\n          }\n          union = root\n        }\n        const node = classes.BytesUnion.encoder(union)\n        const block = node.block()\n        const len = indexLength(union.nbl.indexes)\n        yield { len, block }\n        main.indexes.push(len)\n        main.parts.push(block.cid())\n      }\n    } else {\n      while (indexes.length) {\n        const chunk = {\n          indexes: indexes.splice(0, max),\n          parts: parts.splice(0, max)\n        }\n        let offset = 0\n        for (const part of chunk.indexes) {\n          part[0] = offset\n          offset += part[1]\n        }\n        const block = classes.BytesUnion.encoder({ byteLinks: chunk }).block()\n        yield { len: offset, block }\n        main.indexes.push(offset)\n        main.parts.push(block.cid())\n      }\n    }\n    let offset = 0\n    indexes = main.indexes.map(i => {\n      const ret = [offset, i]\n      offset += i\n      return ret\n    })\n    parts = await Promise.all(main.parts)\n    yield { root: { nbl: { indexes, parts, algo: 'balanced' } } }\n  }\n\n  classes.Data.writer = (opts = {}) => {\n    opts = { ...defaults, ...opts }\n    const { write, end } = _writer()\n    let first\n    const _write = block => {\n      if (!first) first = block\n      return write(block)\n    }\n    const _end = async () => {\n      const { indexes, parts } = await end()\n      if (!indexes.length) return { bytes: { bytes: Buffer.from('') }, size: 0 }\n\n      const size = indexLength(indexes)\n\n      if (indexes.length === 1) {\n        const length = indexes[0][1]\n        if (length > opts.inline) {\n          return { bytes: { bytesLink: parts[0] }, size }\n        } else {\n          return { bytes: { bytes: first.encode() }, size }\n        }\n      }\n      if (indexes.length > opts.maxListLength) {\n        const results = []\n        if (opts.algorithm === 'balanced') {\n          for await (const result of balancedDag(indexes, parts, opts.maxListLength, opts.codec)) {\n            results.push(result)\n          }\n        } else {\n          throw new Error(`Not Implemented: algorith (${opts.algorithm})`)\n        }\n        const last = results.pop()\n        const blocks = results.map(r => r.block)\n        return { blocks, bytes: last.root, size }\n      } else {\n        return { bytes: { byteLinks: { indexes, parts } }, size }\n      }\n    }\n    return { write: _write, end: _end }\n  }\n  classes.Data.from = async function * (arr, opts) {\n    const { write, end } = classes.Data.writer(opts)\n    for (const buffer of arr) {\n      yield { block: write(buffer) }\n    }\n    const data = await end()\n    yield * data.blocks.map(u => ({ block: u }))\n    delete data.blocks\n    yield { root: classes.Data.encoder(data) }\n  }\n  return classes\n}\n"},"lineCount":192}},"error":null,"hash":"f6a5e206da5599de6078b387aa2f5d41","cacheData":{"env":{}}}