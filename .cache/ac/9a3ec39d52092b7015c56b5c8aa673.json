{"id":"node_modules/@ipld/schema-gen/src/types.js","dependencies":[{"name":"/Users/ayosowunmi/Desktop/udemy/fundamentals-javascript-course/complete-javascript-course-master/18-forkify/starter/package.json","includedInParent":true,"mtime":1643224433014},{"name":"/Users/ayosowunmi/Desktop/udemy/fundamentals-javascript-course/complete-javascript-course-master/18-forkify/starter/node_modules/@ipld/schema-gen/package.json","includedInParent":true,"mtime":499162500000},{"name":"cids","loc":{"line":2,"column":20},"parent":"/Users/ayosowunmi/Desktop/udemy/fundamentals-javascript-course/complete-javascript-course-master/18-forkify/starter/node_modules/@ipld/schema-gen/src/types.js","resolved":"/Users/ayosowunmi/Desktop/udemy/fundamentals-javascript-course/complete-javascript-course-master/18-forkify/starter/node_modules/cids/src/index.js"},{"name":"bytesish","loc":{"line":3,"column":22},"parent":"/Users/ayosowunmi/Desktop/udemy/fundamentals-javascript-course/complete-javascript-course-master/18-forkify/starter/node_modules/@ipld/schema-gen/src/types.js","resolved":"/Users/ayosowunmi/Desktop/udemy/fundamentals-javascript-course/complete-javascript-course-master/18-forkify/starter/node_modules/bytesish/browser.js"},{"name":"@ipld/block","loc":{"line":4,"column":22},"parent":"/Users/ayosowunmi/Desktop/udemy/fundamentals-javascript-course/complete-javascript-course-master/18-forkify/starter/node_modules/@ipld/schema-gen/src/types.js","resolved":"/Users/ayosowunmi/Desktop/udemy/fundamentals-javascript-course/complete-javascript-course-master/18-forkify/starter/node_modules/@ipld/block/index.js"},{"name":"buffer","parent":"/Users/ayosowunmi/Desktop/udemy/fundamentals-javascript-course/complete-javascript-course-master/18-forkify/starter/node_modules/@ipld/schema-gen/src/types.js","resolved":"/Users/ayosowunmi/Desktop/udemy/fundamentals-javascript-course/complete-javascript-course-master/18-forkify/starter/node_modules/node-libs-browser/node_modules/buffer/index.js"}],"generated":{"js":"var Buffer = require(\"buffer\").Buffer;\n'use strict'\nconst CID = require('cids')\nconst bytes = require('bytesish')\nconst Block = require('@ipld/block')\n\nconst str = o => JSON.stringify(o)\n\nclass SchemaKindError extends Error {\n  constructor (node) {\n    super(`${str(node.value)} is not a valid ${node.constructor.name}`)\n  }\n}\n\nconst serializeObject = obj => {\n  if (CID.isCID(obj)) return obj\n  const ret = Array.isArray(obj) ? [] : {}\n  for (const [k, v] of Object.entries(obj)) {\n    ret[k] = v.encode()\n  }\n  return ret\n}\n\n// eslint-disable-next-line require-await\nconst keyGenerator = async function * (obj) {\n  for (const key of Object.keys(obj)) {\n    yield key\n  }\n}\n\nconst create = opts => {\n  if (!opts.types) opts.types = {}\n  let classes = {}\n\n  classes.Node = class Node {\n    constructor (value, schema) {\n      // TODO: replace Buffer w/ bytes.valid()\n      if (value && typeof value === 'object' && !Buffer.isBuffer(value) && !CID.isCID(value)) {\n        if (Array.isArray(value)) value = value.slice()\n        else value = { ...value }\n      }\n      this.value = value\n      this.schema = schema\n      this.opts = opts\n    }\n\n    async getNode (path = '') {\n      path = path.split('/').filter(x => x)\n\n      const resolveNode = async node => {\n        if (!this.opts.getBlock) throw new Error('Cannot perform get() without getBlock method')\n        const block = await this.opts.getBlock(node.value)\n        if (!block) throw new Error(`Block:${node.value.toString()} not found`)\n        let expected\n        if (!node.schema.fieldSchema) {\n          expected = node.schema.expectedType\n        } else {\n          expected = node.schema.fieldSchema.type.expectedType\n        }\n        const decoded = block.decode()\n        if (!expected) {\n          node = toNode(decoded)\n        } else {\n          node = classes[expected].decoder(decoded)\n        }\n        return node\n      }\n      let node = this\n\n      // run with empty string in order to get block and cast as type\n      if (!path.length && node.isLink) return resolveNode(node)\n\n      while (path.length) {\n        const prop = path.shift()\n        const parent = node\n        node = node.resolve(prop)\n        if (!node) throw new Error(`${parent.constructor.name} does not contain property ${prop}`)\n        if (node.isLink) {\n          node = await resolveNode(node)\n        }\n      }\n      return node\n    }\n\n    async get (path) {\n      const node = await this.getNode(path)\n      return node.encode()\n    }\n\n    get isNode () {\n      return true\n    }\n\n    validate () {\n      if (this.schema.fieldSchema &&\n          this.schema.fieldSchema.nullable &&\n          this.value === null) return true\n      return this._validate()\n    }\n\n    block () {\n      const data = this.encode()\n      return Block.encoder(data, opts.codec || 'dag-cbor')\n    }\n\n    decode () {\n      // place holder, this will get more complicated when we support renames\n      return this.encode()\n    }\n  }\n\n  classes.Kind = class Kind extends classes.Node {\n    get isKind () {\n      return true\n    }\n\n    encode () {\n      // TODO: alias properties from public to encoded names\n      return this.value\n    }\n\n    resolve (prop) {\n      throw new Error('Cannot lookup sub-properties on kind')\n    }\n  }\n  classes.Int = class Int extends classes.Kind {\n    _validate () {\n      if (!Number.isInteger(this.value)) throw new SchemaKindError(this)\n    }\n  }\n  classes.Float = class Float extends classes.Kind {\n    _validate () {\n      if (typeof this.value !== 'number' || Number.isInteger(this.value)) {\n        throw new SchemaKindError(this)\n      }\n    }\n  }\n  classes.String = class String extends classes.Kind {\n    _validate () {\n      if (typeof this.value !== 'string') throw new SchemaKindError(this)\n    }\n  }\n  classes.Null = class Null extends classes.Kind {\n    _validate () {\n      if (this.value !== null) throw new SchemaKindError(this)\n    }\n  }\n  classes.Bool = class Bool extends classes.Kind {\n    _validate () {\n      if (typeof this.value !== 'boolean') throw new SchemaKindError(this)\n    }\n  }\n  classes.Bytes = class Bytes extends classes.Kind {\n    _validate () {\n      try {\n        bytes.native(this.value)\n      } catch (e) {\n        throw new Error('Cannot convert to Bytes.')\n      }\n    }\n\n    block () {\n      return Block.encoder(bytes.native(this.value), 'raw')\n    }\n\n    read (start = 0, end) {\n      const buffer = this.value\n      const native = bytes.native(bytes.slice(buffer, start, end))\n\n      // eslint-disable-next-line require-await\n      return (async function * () { yield native })()\n    }\n  }\n\n  classes.Map = class Map extends classes.Kind {\n    constructor (...args) {\n      super(...args)\n      for (const [key, value] of Object.entries(this.value)) {\n        if (!this.schema || !this.schema.valueType) {\n          this.value[key] = toNode(value)\n        } else if (typeof this.schema.valueType === 'string') {\n          this.value[key] = classes[this.schema.valueType].create(value)\n        } else {\n          const valueType = this.schema.valueType\n          if (valueType.kind === 'link') {\n            this.value[key] = classes.Link.create(value, { type: valueType })\n          } else if (valueType.kind === 'map') {\n            this.value[key] = classes.Map.create(value, valueType)\n          } else {\n            throw new Error('Not Implemented')\n          }\n        }\n      }\n    }\n\n    resolve (key) {\n      return this.value[key]\n    }\n\n    __validate () {\n      if (this.schema.valueType) {\n        const typeing = this.schema.valueType\n        for (const [key, value] of Object.entries(this.value)) {\n          if (typeof typeing === 'string') {\n            if (value.constructor.name !== typeing) {\n              throw new Error(`Field value for \"${key}\" does not match required ${typeing} type`)\n            }\n          } else {\n            if (typeof typeing !== 'object') throw new Error('Bad typeing info')\n            if (typeing.kind === 'map') {\n              // eslint-disable-next-line\n              if (typeing.keyType !== 'String') throw new Error('Unsupported')\n            } else if (typeing.kind === 'link') {\n              // noop\n            } else {\n              throw new Error('Not Implemented')\n            }\n            // we don't need any more validation because these will already\n            // be cast as proper types and validated below\n          }\n          if (value.isNode) value.validate()\n        }\n      }\n    }\n\n    _validate () {\n      if (typeof this.value !== 'object' ||\n          Array.isArray(this.value) ||\n          this.value === null\n      ) {\n        throw new SchemaKindError(this)\n      }\n      this.__validate()\n    }\n\n    encode () {\n      return serializeObject(this.value)\n    }\n\n    keys () {\n      return keyGenerator(this.value)\n    }\n  }\n  classes.List = class List extends classes.Map {\n    _validate () {\n      if (!Array.isArray(this.value)) throw new SchemaKindError(this)\n      this.__validate()\n    }\n\n    encode () {\n      return this.value.map(value => value.isNode ? value.encode() : value)\n    }\n  }\n  classes.Link = class Link extends classes.Kind {\n    _validate () {\n      if (!CID.isCID(this.value)) throw new SchemaKindError(this)\n    }\n\n    get isLink () {\n      return true\n    }\n  }\n\n  const kindMap = {}\n\n  /* Class.create() */\n  for (const [className, Class] of Object.entries(classes)) {\n    if (className !== 'Node' && className !== 'Kind') {\n      const kind = className.toLowerCase()\n      const schema = { kind }\n      Class.create = (value, fieldSchema) => {\n        if (value && value.isNode) {\n          if (!(value instanceof Class)) throw new Error('Cannot re-type node')\n          return value\n        }\n        let _schema\n        if (fieldSchema) _schema = { ...schema, fieldSchema }\n        else _schema = schema\n        return new Class(value, _schema)\n      }\n      Class.decoder = Class.encoder = value => {\n        const node = Class.create(value)\n        node.validate()\n        return node\n      }\n      kindMap[className.toLowerCase()] = Class\n    }\n  }\n  classes = { ...classes, ...opts.types }\n\n  const toNode = value => {\n    if (value === null) return classes.Null.create(value)\n    if (Buffer.isBuffer(value)) return classes.Bytes.create(value)\n    if (typeof value === 'string') return classes.String.create(value)\n    if (typeof value === 'boolean') return classes.Boolean.create(value)\n    if (typeof value === 'number') {\n      if (Number.isInteger(value)) return classes.Int.create(value)\n      else return classes.Float.create(value)\n    }\n    if (typeof value === 'object') {\n      if (CID.isCID(value)) return classes.Link.create(value)\n      if (Array.isArray(value)) return classes.List.create(value)\n      else return classes.Map.create(value)\n    }\n    throw new Error(`Cannot convert ${value} to kind`)\n  }\n\n  classes.Union = class Union extends classes.Node {\n    constructor (...args) {\n      super(...args)\n      if (!this.schema) throw new Error('Missing schema for union')\n\n      if (this.schema.representation.keyed) {\n        const _keys = Object.keys(this.value)\n        if (!_keys.length) throw new Error('Missing required union key')\n        if (_keys.length !== 1) throw new Error('Union has too many keys')\n        this.keyRep = Object.keys(this.value)[0]\n        const keyed = this.schema.representation.keyed\n        const className = keyed[this.keyRep]\n        if (!className) throw new Error(`Unknown union key \"${this.keyRep}\"`)\n        this.expected = className\n        const val = this.value[this.keyRep]\n        if (typeof className === 'object') {\n          if (className.kind !== 'link') throw new Error('Unknown union type')\n          this.value = classes.Link.create(val, { type: className })\n        } else {\n          if (!classes[className]) throw new Error(`Missing type \"${className}\"`)\n          this.value = classes[className].create(val)\n        }\n      } else {\n        throw new Error('not implemented')\n      }\n    }\n\n    encode () {\n      if (!this.schema.representation.keyed) throw new Error('not implemented')\n      const ret = {}\n      ret[this.keyRep] = this.value.encode()\n      return ret\n    }\n\n    resolve (key) {\n      if (!key) throw new Error('Traversals into unions must include key')\n      if (key === '*') return this.value\n      if (key !== this.keyRep) throw new Error(`Union contains ${this.keyRep} and not ${key}`)\n      return this.value\n    }\n\n    _validate () {\n      return this.value.validate()\n    }\n  }\n\n  classes.Struct = class Struct extends classes.Node {\n    constructor (...args) {\n      super(...args)\n      if (!this.schema) throw new Error('Missing schema for struct')\n      for (const [field, value] of Object.entries(this.value)) {\n        const schema = this.schema.fields[field]\n        if (schema) {\n          let Class\n          if (typeof schema.type === 'object') {\n            Class = kindMap[schema.type.kind]\n            if (!Class) throw new Error(`No kind named ${schema.type.kind}`)\n          } else {\n            Class = classes[schema.type]\n          }\n          if (!Class) throw new Error(`No type named ${schema.type}`)\n          this.value[field] = Class.create(value, schema)\n        } else {\n          this.value[field] = toNode(value)\n        }\n      }\n    }\n\n    resolve (key) {\n      return this.value[key]\n    }\n\n    _validate () {\n      for (const value of Object.values(this.value)) {\n        if (value.isNode) value.validate()\n      }\n    }\n\n    encode () {\n      if (!this.schema.representation.map) throw new Error('Not implemented')\n      return serializeObject(this.value)\n    }\n\n    keys () {\n      return keyGenerator(this.value)\n    }\n  }\n\n  classes.Advanced = class Advanced extends classes.Node {\n    constructor (value, schema, impl) {\n      schema = { ...schema }\n      const nodeType = schema.nodeType\n      delete schema.nodeType\n\n      super(null, schema)\n\n      if (!nodeType) throw new Error('Missing nodeType')\n      this.value = nodeType.create(value)\n      for (const [key, method] of Object.entries(impl)) {\n        this[key] = (...args) => method(this, ...args)\n      }\n    }\n\n    encode () {\n      return this.value.encode()\n    }\n\n    _validate () {\n      return this.value._validate()\n    }\n\n    resolve (...args) {\n      return this.value.resolve(...args)\n    }\n  }\n\n  return classes\n}\n\nmodule.exports = create\nmodule.exports.serializeObject = serializeObject\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":101,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":102,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":103,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":104,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":105,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":106,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":107,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":108,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":109,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":110,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":111,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":112,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":113,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":114,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":115,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":116,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":117,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":118,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":119,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":120,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":121,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":122,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":123,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":124,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":125,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":126,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":127,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":128,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":129,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":130,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":131,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":132,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":133,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":134,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":135,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":136,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":137,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":138,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":139,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":140,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":141,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":142,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":143,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":144,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":145,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":146,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":147,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":148,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":149,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":150,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":151,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":152,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":153,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":154,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":155,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":156,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":157,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":158,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":159,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":160,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":161,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":162,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":163,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":164,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":165,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":166,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":167,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":168,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":169,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":170,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":171,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":172,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":173,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":174,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":175,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":176,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":177,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":178,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":179,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":180,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":181,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":182,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":183,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":184,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":185,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":186,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":187,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":188,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":189,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":190,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":191,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":192,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":193,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":194,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":195,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":196,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":197,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":198,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":199,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":200,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":201,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":202,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":203,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":204,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":205,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":206,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":207,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":208,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":209,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":210,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":211,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":212,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":213,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":214,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":215,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":216,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":217,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":218,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":219,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":220,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":221,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":222,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":223,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":224,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":225,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":226,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":227,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":228,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":229,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":230,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":231,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":232,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":233,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":234,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":235,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":236,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":237,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":238,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":239,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":240,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":241,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":242,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":243,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":244,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":245,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":246,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":247,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":248,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":249,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":250,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":251,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":252,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":253,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":254,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":255,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":256,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":257,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":258,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":259,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":260,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":261,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":262,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":263,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":264,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":265,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":266,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":267,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":268,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":269,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":270,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":271,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":272,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":273,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":274,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":275,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":276,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":277,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":278,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":279,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":280,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":281,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":282,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":283,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":284,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":285,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":286,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":287,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":288,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":289,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":290,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":291,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":292,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":293,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":294,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":295,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":296,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":297,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":298,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":299,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":300,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":301,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":302,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":303,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":304,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":305,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":306,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":307,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":308,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":309,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":310,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":311,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":312,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":313,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":314,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":315,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":316,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":317,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":318,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":319,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":320,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":321,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":322,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":323,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":324,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":325,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":326,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":327,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":328,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":329,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":330,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":331,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":332,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":333,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":334,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":335,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":336,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":337,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":338,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":339,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":340,"column":0},"generated":{"line":341,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":341,"column":0},"generated":{"line":342,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":342,"column":0},"generated":{"line":343,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":343,"column":0},"generated":{"line":344,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":344,"column":0},"generated":{"line":345,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":345,"column":0},"generated":{"line":346,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":346,"column":0},"generated":{"line":347,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":347,"column":0},"generated":{"line":348,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":348,"column":0},"generated":{"line":349,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":349,"column":0},"generated":{"line":350,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":350,"column":0},"generated":{"line":351,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":351,"column":0},"generated":{"line":352,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":352,"column":0},"generated":{"line":353,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":353,"column":0},"generated":{"line":354,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":354,"column":0},"generated":{"line":355,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":355,"column":0},"generated":{"line":356,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":356,"column":0},"generated":{"line":357,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":357,"column":0},"generated":{"line":358,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":358,"column":0},"generated":{"line":359,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":359,"column":0},"generated":{"line":360,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":360,"column":0},"generated":{"line":361,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":361,"column":0},"generated":{"line":362,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":362,"column":0},"generated":{"line":363,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":363,"column":0},"generated":{"line":364,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":364,"column":0},"generated":{"line":365,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":365,"column":0},"generated":{"line":366,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":366,"column":0},"generated":{"line":367,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":367,"column":0},"generated":{"line":368,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":368,"column":0},"generated":{"line":369,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":369,"column":0},"generated":{"line":370,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":370,"column":0},"generated":{"line":371,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":371,"column":0},"generated":{"line":372,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":372,"column":0},"generated":{"line":373,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":373,"column":0},"generated":{"line":374,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":374,"column":0},"generated":{"line":375,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":375,"column":0},"generated":{"line":376,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":376,"column":0},"generated":{"line":377,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":377,"column":0},"generated":{"line":378,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":378,"column":0},"generated":{"line":379,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":379,"column":0},"generated":{"line":380,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":380,"column":0},"generated":{"line":381,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":381,"column":0},"generated":{"line":382,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":382,"column":0},"generated":{"line":383,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":383,"column":0},"generated":{"line":384,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":384,"column":0},"generated":{"line":385,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":385,"column":0},"generated":{"line":386,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":386,"column":0},"generated":{"line":387,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":387,"column":0},"generated":{"line":388,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":388,"column":0},"generated":{"line":389,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":389,"column":0},"generated":{"line":390,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":390,"column":0},"generated":{"line":391,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":391,"column":0},"generated":{"line":392,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":392,"column":0},"generated":{"line":393,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":393,"column":0},"generated":{"line":394,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":394,"column":0},"generated":{"line":395,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":395,"column":0},"generated":{"line":396,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":396,"column":0},"generated":{"line":397,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":397,"column":0},"generated":{"line":398,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":398,"column":0},"generated":{"line":399,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":399,"column":0},"generated":{"line":400,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":400,"column":0},"generated":{"line":401,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":401,"column":0},"generated":{"line":402,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":402,"column":0},"generated":{"line":403,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":403,"column":0},"generated":{"line":404,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":404,"column":0},"generated":{"line":405,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":405,"column":0},"generated":{"line":406,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":406,"column":0},"generated":{"line":407,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":407,"column":0},"generated":{"line":408,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":408,"column":0},"generated":{"line":409,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":409,"column":0},"generated":{"line":410,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":410,"column":0},"generated":{"line":411,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":411,"column":0},"generated":{"line":412,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":412,"column":0},"generated":{"line":413,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":413,"column":0},"generated":{"line":414,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":414,"column":0},"generated":{"line":415,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":415,"column":0},"generated":{"line":416,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":416,"column":0},"generated":{"line":417,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":417,"column":0},"generated":{"line":418,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":418,"column":0},"generated":{"line":419,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":419,"column":0},"generated":{"line":420,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":420,"column":0},"generated":{"line":421,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":421,"column":0},"generated":{"line":422,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":422,"column":0},"generated":{"line":423,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":423,"column":0},"generated":{"line":424,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":424,"column":0},"generated":{"line":425,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":425,"column":0},"generated":{"line":426,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":426,"column":0},"generated":{"line":427,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":427,"column":0},"generated":{"line":428,"column":0}},{"source":"node_modules/@ipld/schema-gen/src/types.js","original":{"line":428,"column":0},"generated":{"line":429,"column":0}}],"sources":{"node_modules/@ipld/schema-gen/src/types.js":"'use strict'\nconst CID = require('cids')\nconst bytes = require('bytesish')\nconst Block = require('@ipld/block')\n\nconst str = o => JSON.stringify(o)\n\nclass SchemaKindError extends Error {\n  constructor (node) {\n    super(`${str(node.value)} is not a valid ${node.constructor.name}`)\n  }\n}\n\nconst serializeObject = obj => {\n  if (CID.isCID(obj)) return obj\n  const ret = Array.isArray(obj) ? [] : {}\n  for (const [k, v] of Object.entries(obj)) {\n    ret[k] = v.encode()\n  }\n  return ret\n}\n\n// eslint-disable-next-line require-await\nconst keyGenerator = async function * (obj) {\n  for (const key of Object.keys(obj)) {\n    yield key\n  }\n}\n\nconst create = opts => {\n  if (!opts.types) opts.types = {}\n  let classes = {}\n\n  classes.Node = class Node {\n    constructor (value, schema) {\n      // TODO: replace Buffer w/ bytes.valid()\n      if (value && typeof value === 'object' && !Buffer.isBuffer(value) && !CID.isCID(value)) {\n        if (Array.isArray(value)) value = value.slice()\n        else value = { ...value }\n      }\n      this.value = value\n      this.schema = schema\n      this.opts = opts\n    }\n\n    async getNode (path = '') {\n      path = path.split('/').filter(x => x)\n\n      const resolveNode = async node => {\n        if (!this.opts.getBlock) throw new Error('Cannot perform get() without getBlock method')\n        const block = await this.opts.getBlock(node.value)\n        if (!block) throw new Error(`Block:${node.value.toString()} not found`)\n        let expected\n        if (!node.schema.fieldSchema) {\n          expected = node.schema.expectedType\n        } else {\n          expected = node.schema.fieldSchema.type.expectedType\n        }\n        const decoded = block.decode()\n        if (!expected) {\n          node = toNode(decoded)\n        } else {\n          node = classes[expected].decoder(decoded)\n        }\n        return node\n      }\n      let node = this\n\n      // run with empty string in order to get block and cast as type\n      if (!path.length && node.isLink) return resolveNode(node)\n\n      while (path.length) {\n        const prop = path.shift()\n        const parent = node\n        node = node.resolve(prop)\n        if (!node) throw new Error(`${parent.constructor.name} does not contain property ${prop}`)\n        if (node.isLink) {\n          node = await resolveNode(node)\n        }\n      }\n      return node\n    }\n\n    async get (path) {\n      const node = await this.getNode(path)\n      return node.encode()\n    }\n\n    get isNode () {\n      return true\n    }\n\n    validate () {\n      if (this.schema.fieldSchema &&\n          this.schema.fieldSchema.nullable &&\n          this.value === null) return true\n      return this._validate()\n    }\n\n    block () {\n      const data = this.encode()\n      return Block.encoder(data, opts.codec || 'dag-cbor')\n    }\n\n    decode () {\n      // place holder, this will get more complicated when we support renames\n      return this.encode()\n    }\n  }\n\n  classes.Kind = class Kind extends classes.Node {\n    get isKind () {\n      return true\n    }\n\n    encode () {\n      // TODO: alias properties from public to encoded names\n      return this.value\n    }\n\n    resolve (prop) {\n      throw new Error('Cannot lookup sub-properties on kind')\n    }\n  }\n  classes.Int = class Int extends classes.Kind {\n    _validate () {\n      if (!Number.isInteger(this.value)) throw new SchemaKindError(this)\n    }\n  }\n  classes.Float = class Float extends classes.Kind {\n    _validate () {\n      if (typeof this.value !== 'number' || Number.isInteger(this.value)) {\n        throw new SchemaKindError(this)\n      }\n    }\n  }\n  classes.String = class String extends classes.Kind {\n    _validate () {\n      if (typeof this.value !== 'string') throw new SchemaKindError(this)\n    }\n  }\n  classes.Null = class Null extends classes.Kind {\n    _validate () {\n      if (this.value !== null) throw new SchemaKindError(this)\n    }\n  }\n  classes.Bool = class Bool extends classes.Kind {\n    _validate () {\n      if (typeof this.value !== 'boolean') throw new SchemaKindError(this)\n    }\n  }\n  classes.Bytes = class Bytes extends classes.Kind {\n    _validate () {\n      try {\n        bytes.native(this.value)\n      } catch (e) {\n        throw new Error('Cannot convert to Bytes.')\n      }\n    }\n\n    block () {\n      return Block.encoder(bytes.native(this.value), 'raw')\n    }\n\n    read (start = 0, end) {\n      const buffer = this.value\n      const native = bytes.native(bytes.slice(buffer, start, end))\n\n      // eslint-disable-next-line require-await\n      return (async function * () { yield native })()\n    }\n  }\n\n  classes.Map = class Map extends classes.Kind {\n    constructor (...args) {\n      super(...args)\n      for (const [key, value] of Object.entries(this.value)) {\n        if (!this.schema || !this.schema.valueType) {\n          this.value[key] = toNode(value)\n        } else if (typeof this.schema.valueType === 'string') {\n          this.value[key] = classes[this.schema.valueType].create(value)\n        } else {\n          const valueType = this.schema.valueType\n          if (valueType.kind === 'link') {\n            this.value[key] = classes.Link.create(value, { type: valueType })\n          } else if (valueType.kind === 'map') {\n            this.value[key] = classes.Map.create(value, valueType)\n          } else {\n            throw new Error('Not Implemented')\n          }\n        }\n      }\n    }\n\n    resolve (key) {\n      return this.value[key]\n    }\n\n    __validate () {\n      if (this.schema.valueType) {\n        const typeing = this.schema.valueType\n        for (const [key, value] of Object.entries(this.value)) {\n          if (typeof typeing === 'string') {\n            if (value.constructor.name !== typeing) {\n              throw new Error(`Field value for \"${key}\" does not match required ${typeing} type`)\n            }\n          } else {\n            if (typeof typeing !== 'object') throw new Error('Bad typeing info')\n            if (typeing.kind === 'map') {\n              // eslint-disable-next-line\n              if (typeing.keyType !== 'String') throw new Error('Unsupported')\n            } else if (typeing.kind === 'link') {\n              // noop\n            } else {\n              throw new Error('Not Implemented')\n            }\n            // we don't need any more validation because these will already\n            // be cast as proper types and validated below\n          }\n          if (value.isNode) value.validate()\n        }\n      }\n    }\n\n    _validate () {\n      if (typeof this.value !== 'object' ||\n          Array.isArray(this.value) ||\n          this.value === null\n      ) {\n        throw new SchemaKindError(this)\n      }\n      this.__validate()\n    }\n\n    encode () {\n      return serializeObject(this.value)\n    }\n\n    keys () {\n      return keyGenerator(this.value)\n    }\n  }\n  classes.List = class List extends classes.Map {\n    _validate () {\n      if (!Array.isArray(this.value)) throw new SchemaKindError(this)\n      this.__validate()\n    }\n\n    encode () {\n      return this.value.map(value => value.isNode ? value.encode() : value)\n    }\n  }\n  classes.Link = class Link extends classes.Kind {\n    _validate () {\n      if (!CID.isCID(this.value)) throw new SchemaKindError(this)\n    }\n\n    get isLink () {\n      return true\n    }\n  }\n\n  const kindMap = {}\n\n  /* Class.create() */\n  for (const [className, Class] of Object.entries(classes)) {\n    if (className !== 'Node' && className !== 'Kind') {\n      const kind = className.toLowerCase()\n      const schema = { kind }\n      Class.create = (value, fieldSchema) => {\n        if (value && value.isNode) {\n          if (!(value instanceof Class)) throw new Error('Cannot re-type node')\n          return value\n        }\n        let _schema\n        if (fieldSchema) _schema = { ...schema, fieldSchema }\n        else _schema = schema\n        return new Class(value, _schema)\n      }\n      Class.decoder = Class.encoder = value => {\n        const node = Class.create(value)\n        node.validate()\n        return node\n      }\n      kindMap[className.toLowerCase()] = Class\n    }\n  }\n  classes = { ...classes, ...opts.types }\n\n  const toNode = value => {\n    if (value === null) return classes.Null.create(value)\n    if (Buffer.isBuffer(value)) return classes.Bytes.create(value)\n    if (typeof value === 'string') return classes.String.create(value)\n    if (typeof value === 'boolean') return classes.Boolean.create(value)\n    if (typeof value === 'number') {\n      if (Number.isInteger(value)) return classes.Int.create(value)\n      else return classes.Float.create(value)\n    }\n    if (typeof value === 'object') {\n      if (CID.isCID(value)) return classes.Link.create(value)\n      if (Array.isArray(value)) return classes.List.create(value)\n      else return classes.Map.create(value)\n    }\n    throw new Error(`Cannot convert ${value} to kind`)\n  }\n\n  classes.Union = class Union extends classes.Node {\n    constructor (...args) {\n      super(...args)\n      if (!this.schema) throw new Error('Missing schema for union')\n\n      if (this.schema.representation.keyed) {\n        const _keys = Object.keys(this.value)\n        if (!_keys.length) throw new Error('Missing required union key')\n        if (_keys.length !== 1) throw new Error('Union has too many keys')\n        this.keyRep = Object.keys(this.value)[0]\n        const keyed = this.schema.representation.keyed\n        const className = keyed[this.keyRep]\n        if (!className) throw new Error(`Unknown union key \"${this.keyRep}\"`)\n        this.expected = className\n        const val = this.value[this.keyRep]\n        if (typeof className === 'object') {\n          if (className.kind !== 'link') throw new Error('Unknown union type')\n          this.value = classes.Link.create(val, { type: className })\n        } else {\n          if (!classes[className]) throw new Error(`Missing type \"${className}\"`)\n          this.value = classes[className].create(val)\n        }\n      } else {\n        throw new Error('not implemented')\n      }\n    }\n\n    encode () {\n      if (!this.schema.representation.keyed) throw new Error('not implemented')\n      const ret = {}\n      ret[this.keyRep] = this.value.encode()\n      return ret\n    }\n\n    resolve (key) {\n      if (!key) throw new Error('Traversals into unions must include key')\n      if (key === '*') return this.value\n      if (key !== this.keyRep) throw new Error(`Union contains ${this.keyRep} and not ${key}`)\n      return this.value\n    }\n\n    _validate () {\n      return this.value.validate()\n    }\n  }\n\n  classes.Struct = class Struct extends classes.Node {\n    constructor (...args) {\n      super(...args)\n      if (!this.schema) throw new Error('Missing schema for struct')\n      for (const [field, value] of Object.entries(this.value)) {\n        const schema = this.schema.fields[field]\n        if (schema) {\n          let Class\n          if (typeof schema.type === 'object') {\n            Class = kindMap[schema.type.kind]\n            if (!Class) throw new Error(`No kind named ${schema.type.kind}`)\n          } else {\n            Class = classes[schema.type]\n          }\n          if (!Class) throw new Error(`No type named ${schema.type}`)\n          this.value[field] = Class.create(value, schema)\n        } else {\n          this.value[field] = toNode(value)\n        }\n      }\n    }\n\n    resolve (key) {\n      return this.value[key]\n    }\n\n    _validate () {\n      for (const value of Object.values(this.value)) {\n        if (value.isNode) value.validate()\n      }\n    }\n\n    encode () {\n      if (!this.schema.representation.map) throw new Error('Not implemented')\n      return serializeObject(this.value)\n    }\n\n    keys () {\n      return keyGenerator(this.value)\n    }\n  }\n\n  classes.Advanced = class Advanced extends classes.Node {\n    constructor (value, schema, impl) {\n      schema = { ...schema }\n      const nodeType = schema.nodeType\n      delete schema.nodeType\n\n      super(null, schema)\n\n      if (!nodeType) throw new Error('Missing nodeType')\n      this.value = nodeType.create(value)\n      for (const [key, method] of Object.entries(impl)) {\n        this[key] = (...args) => method(this, ...args)\n      }\n    }\n\n    encode () {\n      return this.value.encode()\n    }\n\n    _validate () {\n      return this.value._validate()\n    }\n\n    resolve (...args) {\n      return this.value.resolve(...args)\n    }\n  }\n\n  return classes\n}\n\nmodule.exports = create\nmodule.exports.serializeObject = serializeObject\n"},"lineCount":429}},"error":null,"hash":"0cbdedc29458cfc05a252b7b44700359","cacheData":{"env":{}}}