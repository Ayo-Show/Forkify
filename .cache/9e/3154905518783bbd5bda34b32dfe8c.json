{"id":"node_modules/@ipld/block/index.js","dependencies":[{"name":"/Users/ayosowunmi/Desktop/udemy/fundamentals-javascript-course/complete-javascript-course-master/18-forkify/starter/package.json","includedInParent":true,"mtime":1643224433014},{"name":"/Users/ayosowunmi/Desktop/udemy/fundamentals-javascript-course/complete-javascript-course-master/18-forkify/starter/node_modules/@ipld/block/package.json","includedInParent":true,"mtime":499162500000},{"name":"buffer","loc":{"line":2,"column":27},"parent":"/Users/ayosowunmi/Desktop/udemy/fundamentals-javascript-course/complete-javascript-course-master/18-forkify/starter/node_modules/@ipld/block/index.js","resolved":"/Users/ayosowunmi/Desktop/udemy/fundamentals-javascript-course/complete-javascript-course-master/18-forkify/starter/node_modules/node-libs-browser/node_modules/buffer/index.js"},{"name":"cids","loc":{"line":3,"column":20},"parent":"/Users/ayosowunmi/Desktop/udemy/fundamentals-javascript-course/complete-javascript-course-master/18-forkify/starter/node_modules/@ipld/block/index.js","resolved":"/Users/ayosowunmi/Desktop/udemy/fundamentals-javascript-course/complete-javascript-course-master/18-forkify/starter/node_modules/cids/src/index.js"},{"name":"@ipld/get-codec","loc":{"line":4,"column":25},"parent":"/Users/ayosowunmi/Desktop/udemy/fundamentals-javascript-course/complete-javascript-course-master/18-forkify/starter/node_modules/@ipld/block/index.js","resolved":"/Users/ayosowunmi/Desktop/udemy/fundamentals-javascript-course/complete-javascript-course-master/18-forkify/starter/node_modules/@ipld/get-codec/index-browser.js"},{"name":"class-is","loc":{"line":5,"column":23},"parent":"/Users/ayosowunmi/Desktop/udemy/fundamentals-javascript-course/complete-javascript-course-master/18-forkify/starter/node_modules/@ipld/block/index.js","resolved":"/Users/ayosowunmi/Desktop/udemy/fundamentals-javascript-course/complete-javascript-course-master/18-forkify/starter/node_modules/class-is/index.js"},{"name":"lodash.transform","loc":{"line":6,"column":26},"parent":"/Users/ayosowunmi/Desktop/udemy/fundamentals-javascript-course/complete-javascript-course-master/18-forkify/starter/node_modules/@ipld/block/index.js","resolved":"/Users/ayosowunmi/Desktop/udemy/fundamentals-javascript-course/complete-javascript-course-master/18-forkify/starter/node_modules/lodash.transform/index.js"},{"name":"multihashing-async","loc":{"line":10,"column":29},"parent":"/Users/ayosowunmi/Desktop/udemy/fundamentals-javascript-course/complete-javascript-course-master/18-forkify/starter/node_modules/@ipld/block/index.js","resolved":"/Users/ayosowunmi/Desktop/udemy/fundamentals-javascript-course/complete-javascript-course-master/18-forkify/starter/node_modules/multihashing-async/src/index.js"}],"generated":{"js":"\n'use strict'\nconst { Buffer } = require('buffer')\nconst CID = require('cids')\nconst getCodec = require('@ipld/get-codec')\nconst withIs = require('class-is')\nconst transform = require('lodash.transform')\n\nconst readonly = value => ({ get: () => value, set: () => { throw new Error('Cannot set read-only property') } })\n\nconst multihashing = require('multihashing-async')\n\nconst clone = obj => transform(obj, (result, value, key) => {\n  if (CID.isCID(value)) {\n    result[key] = value\n  } else if (Buffer.isBuffer(value)) {\n    const b = Buffer.allocUnsafe(value.length)\n    value.copy(b)\n    result[key] = b\n  } else if (typeof value === 'object' && value !== null) {\n    result[key] = clone(value)\n  } else {\n    result[key] = value\n  }\n})\n\nclass Block {\n  constructor (opts) {\n    if (!opts) throw new Error('Block options are required')\n    if (typeof opts.source === 'undefined' &&\n        typeof opts.data === 'undefined') {\n      throw new Error('Block instances must be created with either an encode source or data')\n    }\n    if (opts.source && !opts.codec) {\n      throw new Error('Block instances created from source objects must include desired codec')\n    }\n    if (opts.data && !opts.cid && !opts.codec) {\n      throw new Error('Block instances created from data must include cid or codec')\n    }\n    if (!opts.cid && !opts.algo) opts.algo = 'sha2-256'\n    // Do our best to avoid accidental mutations of the options object after instantiation\n    // Note: we can't actually freeze the object because we mutate it once per property later\n    opts = Object.assign({}, opts)\n    Object.defineProperty(this, 'opts', readonly(opts))\n  }\n\n  source () {\n    if (this.opts.cid || this.opts.data ||\n        this._encoded || this._decoded) return null\n    if (!this.opts.source) return null\n    return this.opts.source\n  }\n\n  async cid () {\n    if (this.opts.cid) return this.opts.cid\n    const codec = this.codec\n    const hash = await multihashing(await this.encode(), this.opts.algo)\n    const cid = new CID(1, codec, hash)\n    this.opts.cid = cid\n    return cid\n  }\n\n  get codec () {\n    if (this.opts.cid) return this.opts.cid.codec\n    else return this.opts.codec\n  }\n\n  async validate () {\n    // if we haven't created a CID yet we know it will be valid :)\n    if (!this.opts.cid) return true\n    const cid = await this.cid()\n    const data = await this.encode()\n    return multihashing.validate(data, cid.multihash)\n  }\n\n  _encode () {\n    const codec = module.exports.getCodec(this.codec)\n    this._encoded = this.opts.data || codec.encode(this.opts.source)\n  }\n\n  encode () {\n    if (!this._encoded) this._encode()\n    const buff = Buffer.allocUnsafe(this._encoded.length)\n    this._encoded.copy(buff)\n    return buff\n  }\n\n  encodeUnsafe () {\n    if (!this._encoded) this._encode()\n    return this._encoded\n  }\n\n  _decode () {\n    const codec = module.exports.getCodec(this.codec)\n    if (this.opts.source) this._decoded = this.opts.source\n    else this._decoded = codec.decode(this._encoded || this.opts.data)\n    return this._decoded\n  }\n\n  decode () {\n    if (this.codec === 'dag-pb') return this._decode()\n    if (!this._decoded) this._decode()\n    const tt = typeof this._decoded\n    if (tt === 'number' || tt === 'boolean') {\n      // return any immutable types\n      return this._decoded\n    }\n    if (Buffer.isBuffer(this._decoded)) return Buffer.from(this._decoded)\n    return clone(this._decoded)\n  }\n\n  decodeUnsafe () {\n    if (!this._decoded) this._decode()\n    return this._decoded\n  }\n\n  reader () {\n    const codec = module.exports.getCodec(this.codec)\n    return codec.reader(this)\n  }\n\n  async equals (block) {\n    if (block === this) return true\n    const cid = await this.cid()\n    if (CID.isCID(block)) return cid.equals(block)\n    return cid.equals(await block.cid())\n  }\n}\n\nconst BlockWithIs = withIs(Block, { className: 'Block', symbolName: '@ipld/block' })\nBlockWithIs.getCodec = getCodec\n\nBlockWithIs.encoder = (source, codec, algo) => new BlockWithIs({ source, codec, algo })\nBlockWithIs.decoder = (data, codec, algo) => new BlockWithIs({ data, codec, algo })\nBlockWithIs.create = (data, cid/*, validate = false */) => {\n  if (typeof cid === 'string') cid = new CID(cid)\n  /*\n  if (validate) {\n    // TODO: validate cid hash matches data\n  }\n  */\n  return new BlockWithIs({ data, cid })\n}\nmodule.exports = BlockWithIs\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/@ipld/block/index.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":101,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":102,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":103,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":104,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":105,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":106,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":107,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":108,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":109,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":110,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":111,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":112,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":113,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":114,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":115,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":116,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":117,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":118,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":119,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":120,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":121,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":122,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":123,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":124,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":125,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":126,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":127,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":128,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":129,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":130,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":131,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":132,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":133,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":134,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":135,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":136,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":137,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":138,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":139,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":140,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":141,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":142,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":143,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/@ipld/block/index.js","original":{"line":144,"column":0},"generated":{"line":145,"column":0}}],"sources":{"node_modules/@ipld/block/index.js":"'use strict'\nconst { Buffer } = require('buffer')\nconst CID = require('cids')\nconst getCodec = require('@ipld/get-codec')\nconst withIs = require('class-is')\nconst transform = require('lodash.transform')\n\nconst readonly = value => ({ get: () => value, set: () => { throw new Error('Cannot set read-only property') } })\n\nconst multihashing = require('multihashing-async')\n\nconst clone = obj => transform(obj, (result, value, key) => {\n  if (CID.isCID(value)) {\n    result[key] = value\n  } else if (Buffer.isBuffer(value)) {\n    const b = Buffer.allocUnsafe(value.length)\n    value.copy(b)\n    result[key] = b\n  } else if (typeof value === 'object' && value !== null) {\n    result[key] = clone(value)\n  } else {\n    result[key] = value\n  }\n})\n\nclass Block {\n  constructor (opts) {\n    if (!opts) throw new Error('Block options are required')\n    if (typeof opts.source === 'undefined' &&\n        typeof opts.data === 'undefined') {\n      throw new Error('Block instances must be created with either an encode source or data')\n    }\n    if (opts.source && !opts.codec) {\n      throw new Error('Block instances created from source objects must include desired codec')\n    }\n    if (opts.data && !opts.cid && !opts.codec) {\n      throw new Error('Block instances created from data must include cid or codec')\n    }\n    if (!opts.cid && !opts.algo) opts.algo = 'sha2-256'\n    // Do our best to avoid accidental mutations of the options object after instantiation\n    // Note: we can't actually freeze the object because we mutate it once per property later\n    opts = Object.assign({}, opts)\n    Object.defineProperty(this, 'opts', readonly(opts))\n  }\n\n  source () {\n    if (this.opts.cid || this.opts.data ||\n        this._encoded || this._decoded) return null\n    if (!this.opts.source) return null\n    return this.opts.source\n  }\n\n  async cid () {\n    if (this.opts.cid) return this.opts.cid\n    const codec = this.codec\n    const hash = await multihashing(await this.encode(), this.opts.algo)\n    const cid = new CID(1, codec, hash)\n    this.opts.cid = cid\n    return cid\n  }\n\n  get codec () {\n    if (this.opts.cid) return this.opts.cid.codec\n    else return this.opts.codec\n  }\n\n  async validate () {\n    // if we haven't created a CID yet we know it will be valid :)\n    if (!this.opts.cid) return true\n    const cid = await this.cid()\n    const data = await this.encode()\n    return multihashing.validate(data, cid.multihash)\n  }\n\n  _encode () {\n    const codec = module.exports.getCodec(this.codec)\n    this._encoded = this.opts.data || codec.encode(this.opts.source)\n  }\n\n  encode () {\n    if (!this._encoded) this._encode()\n    const buff = Buffer.allocUnsafe(this._encoded.length)\n    this._encoded.copy(buff)\n    return buff\n  }\n\n  encodeUnsafe () {\n    if (!this._encoded) this._encode()\n    return this._encoded\n  }\n\n  _decode () {\n    const codec = module.exports.getCodec(this.codec)\n    if (this.opts.source) this._decoded = this.opts.source\n    else this._decoded = codec.decode(this._encoded || this.opts.data)\n    return this._decoded\n  }\n\n  decode () {\n    if (this.codec === 'dag-pb') return this._decode()\n    if (!this._decoded) this._decode()\n    const tt = typeof this._decoded\n    if (tt === 'number' || tt === 'boolean') {\n      // return any immutable types\n      return this._decoded\n    }\n    if (Buffer.isBuffer(this._decoded)) return Buffer.from(this._decoded)\n    return clone(this._decoded)\n  }\n\n  decodeUnsafe () {\n    if (!this._decoded) this._decode()\n    return this._decoded\n  }\n\n  reader () {\n    const codec = module.exports.getCodec(this.codec)\n    return codec.reader(this)\n  }\n\n  async equals (block) {\n    if (block === this) return true\n    const cid = await this.cid()\n    if (CID.isCID(block)) return cid.equals(block)\n    return cid.equals(await block.cid())\n  }\n}\n\nconst BlockWithIs = withIs(Block, { className: 'Block', symbolName: '@ipld/block' })\nBlockWithIs.getCodec = getCodec\n\nBlockWithIs.encoder = (source, codec, algo) => new BlockWithIs({ source, codec, algo })\nBlockWithIs.decoder = (data, codec, algo) => new BlockWithIs({ data, codec, algo })\nBlockWithIs.create = (data, cid/*, validate = false */) => {\n  if (typeof cid === 'string') cid = new CID(cid)\n  /*\n  if (validate) {\n    // TODO: validate cid hash matches data\n  }\n  */\n  return new BlockWithIs({ data, cid })\n}\nmodule.exports = BlockWithIs\n"},"lineCount":145}},"error":null,"hash":"a0c531fea363505eebd3511c1240111c","cacheData":{"env":{}}}