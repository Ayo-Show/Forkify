{"id":"node_modules/@ipld/unixfsv2/src/file.js","dependencies":[{"name":"/Users/ayosowunmi/Desktop/udemy/fundamentals-javascript-course/complete-javascript-course-master/18-forkify/starter/package.json","includedInParent":true,"mtime":1643224433014},{"name":"/Users/ayosowunmi/Desktop/udemy/fundamentals-javascript-course/complete-javascript-course-master/18-forkify/starter/node_modules/@ipld/unixfsv2/package.json","includedInParent":true,"mtime":499162500000},{"name":"bytesish","loc":{"line":2,"column":22},"parent":"/Users/ayosowunmi/Desktop/udemy/fundamentals-javascript-course/complete-javascript-course-master/18-forkify/starter/node_modules/@ipld/unixfsv2/src/file.js","resolved":"/Users/ayosowunmi/Desktop/udemy/fundamentals-javascript-course/complete-javascript-course-master/18-forkify/starter/node_modules/bytesish/browser.js"}],"generated":{"js":"'use strict'\nconst bytes = require('bytesish')\n\nconst attach = types => {\n  const fromIter = async function * (iter, name, opts = {}) {\n    const { write, end } = types.Data.writer(opts)\n    for await (let chunk of iter) {\n      chunk = bytes.native(chunk)\n      const block = write(chunk)\n      yield { block }\n    }\n    const data = await end()\n    if (data.blocks) {\n      for (const block of (data.blocks)) {\n        yield { block }\n      }\n      delete data.blocks\n    }\n\n    const file = types.File.encoder({ name, data })\n    yield { root: file }\n  }\n  types.File.fromIter = fromIter\n}\n\nmodule.exports = attach\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/@ipld/unixfsv2/src/file.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/file.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/file.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/file.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/file.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/file.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/file.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/file.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/file.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/file.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/file.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/file.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/file.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/file.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/file.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/file.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/file.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/file.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/file.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/file.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/file.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/file.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/file.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/file.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/file.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/file.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@ipld/unixfsv2/src/file.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}}],"sources":{"node_modules/@ipld/unixfsv2/src/file.js":"'use strict'\nconst bytes = require('bytesish')\n\nconst attach = types => {\n  const fromIter = async function * (iter, name, opts = {}) {\n    const { write, end } = types.Data.writer(opts)\n    for await (let chunk of iter) {\n      chunk = bytes.native(chunk)\n      const block = write(chunk)\n      yield { block }\n    }\n    const data = await end()\n    if (data.blocks) {\n      for (const block of (data.blocks)) {\n        yield { block }\n      }\n      delete data.blocks\n    }\n\n    const file = types.File.encoder({ name, data })\n    yield { root: file }\n  }\n  types.File.fromIter = fromIter\n}\n\nmodule.exports = attach\n"},"lineCount":27}},"error":null,"hash":"c6513a85a0d6f987a249c1715e6d0240","cacheData":{"env":{}}}